using NUnit.Framework;
using System.Collections.Generic;

namespace Codility.Lesson07
{
    public static class Fish
    {
        [Test]
        public static void Test()
        {
            var result = Run(new[] { 4, 3, 2, 1, 5 }, new[] { 0, 1, 0, 0, 0 });
            Assert.AreEqual(2, result);

            result = Run(new[] { 1 }, new[] { 0 });
            Assert.AreEqual(1, result);

            result = Run(new[] { 0, 1 }, new[] { 1, 1 });
            Assert.AreEqual(2, result);

            result = Run(new[] { 8, 6, 5, 3, 2, 4, 7 }, new[] { 1, 1, 1, 0, 0, 1, 1 });
            Assert.AreEqual(5, result);

            result = Run(new[] { 8, 6, 5, 3, 2, 4, 7 }, new[] { 1, 1, 1, 1, 1, 0, 0 });
            Assert.AreEqual(1, result);

            result = Run(new[] { 8, 7, 6, 5, 4, 3, 2, 1 }, new[] { 1, 0, 0, 0, 0, 0, 0, 0 });
            Assert.AreEqual(1, result);

            result = Run(
                new[]
                {
                    60784, 686946, 40022, 400519, 657473, 336999, 36846, 8629, 915034, 998496, 924250, 822568, 619077,
                    276547, 241586, 673773, 30494, 74609, 18604, 810348, 983816, 474571, 222168, 696835, 810107, 549971,
                    142600, 281896, 987134, 690593, 476768, 58824, 508926, 51353, 771919, 511351, 976304, 595971,
                    178049, 967459, 234972, 363128, 90978, 112527, 28143, 663596, 905973, 818820, 946713, 388246,
                    363322, 404614, 344178, 6674, 661321, 621452, 955892, 162267, 312541, 418840, 476262, 341790,
                    208793, 423207, 558190, 958749, 364193, 356345, 636930, 666411, 135069, 268254, 601457, 52058,
                    459262, 440055, 145302, 167563, 113832, 770673, 481024, 374754, 842404, 912042, 690115, 189232,
                    102613, 726328, 815698, 171214, 500012, 384581, 427243, 163524, 518997, 748528, 695896, 274048,
                    10860, 430154
                },
                new[]
                {
                    0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,
                    0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0,
                    0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1
                });
            Assert.AreEqual(16, result);
        }

        private static int Run(int[] A, int[] B)
        {
            var dead = 0;
            var stack = new Stack<int>();

            for (int i = 0; i < A.Length; i++)
            {
                if (B[i] == 1)
                {
                    stack.Push(A[i]);
                }
                else
                {
                    while (stack.Count > 0)
                    {
                        dead++;
                        if (stack.Peek() > A[i])
                        {
                            break;
                        }
                        stack.Pop();
                    }
                }
            }

            return A.Length - dead;
        }
    }
}